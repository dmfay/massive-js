'use strict';

const _ = require('lodash');

/**
 * Collapses tabular result sets into a hierarchical object graph based on the
 * provided schema.
 *
 * @module util/decompose
 * @param {Object} schema - An object describing the shape of the output data.
 * Schema objects are nested to arbitrary depth, with a single top-level schema
 * describing the "origin" record format and containing other schemas which
 * describe descendant records.
 * @param {String} schema.pk - The name of a field in the result set which
 * uniquely identifies a single record.
 * @param {Object|Array} schema.columns - A map of field names in the result set
 * to keys of an output object, or an array of field names if no transformation
 * of names is desired.
 * @param {Boolean} schema.array - When true, entities built with this schema
 * are coerced into arrays of entities. This is only valid for nested schemas.
 * If an object described by this schema's parent schema does not contain any
 * records for this schema, an empty array will be generated.
 * @param {Object} schema.anythingElse - Nests a descendant schema under this
 * one.
 * @param {Array} data - Array of database records to decompose.
 * @return {Array} An array of nested objects generated by applying the schema
 * to each data element in turn.
 */
exports = module.exports = function (schema, data) {
  if (!data || data.length === 0) {
    return [];
  }

  data = _.castArray(data);

  /* Generate a nested dictionary of id:entity in the form of the final
   * structure we're trying to build, effectively hashing ids to ensure we
   * don't duplicate any entities in cases where multiple dependent tables are
   * joined into the source query.

   * Output: {1: {id: 1, name: 'hi', children: {111: {id: 111, name: 'ih'}}}
   */
  const mapping = data.reduce(function (acc, row) {
    return (function build (obj, objSchema) {
      const id = row[objSchema.pk];

      // Use a string id instead of the (potentially numerical) row id as keys
      // in the mapping. This prevents Object.keys from reordering the
      // mapping in the "transform" step.
      const strid = '_' + id;

      if (id === null) {
        // null id means this entity doesn't exist (eg outer join)
        return undefined;
      } else if (!obj.hasOwnProperty(strid)) {
        // this entity is new
        obj[strid] = {};
      }

      let mapper;

      if (_.isArray(objSchema.columns)) {
        // columns is just a list of field names
        mapper = val => obj[strid][val] = row[val];
      } else {
        // the columns object maps field names in the row to object key names
        mapper = (val, key) => obj[strid][val] = row[key];
      }

      _.map(objSchema.columns, mapper);

      Object.keys(objSchema).forEach(function (c) {
        switch (c) {
          case 'pk': case 'columns': case 'array': break;
          default: {
            const descendant = build(obj[strid][c] || {}, objSchema[c]);

            if (descendant) {
              obj[strid][c] = descendant;
            } else if (objSchema[c].array) {
              // we always want an array if there could be multiple descendants
              obj[strid][c] = [];
            }

            break;
          }
        }
      });

      return obj;
    })(acc, schema);
  }, {});

  /* Build the final graph. The structure and data already exists in mapping,
   * but we need to transform the {id: entity} structures into arrays of
   * entities (or flat objects if required).
   *
   * Output: [{id: 1, name: 'hi', children: [{id: 111, name: 'ih'}]}] */
  return (function transform (objSchema, map, output) {
    // for every id:entity pair in the current level of mapping, if the schema
    // defines any dependent entities recurse and transform them, then push the
    // current object into the output and return
    return Object.keys(map).reduce(function (acc, id) {
      Object.keys(objSchema)
        .filter(c => {
          return c !== 'columns' && typeof objSchema[c] === 'object';  // just structure now
        })
        .forEach(function (node) {
          // we have to init & pass the accumulator into the *next* recursion
          // since the single option is defined on the child rather than the
          // parent
          const accumulator = objSchema[node] && objSchema[node].array ? [] : {};

          if (map[id][node]) {
            map[id][node] = transform(objSchema[node], map[id][node], accumulator);
          }
        });

      if (Array.isArray(output)) {
        acc.push(map[id]);
      } else {
        acc = map[id];
      }

      return acc;
    }, []);
  })(schema, mapping, []);
};
